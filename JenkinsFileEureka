pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    // ✅ SOLO TRIGGER POR PUSH
    triggers {
        githubPush()
    }

    // ✅ OPCIONES DEL PIPELINE
    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        // Detectar rama automáticamente
        BRANCH_NAME = "${env.GIT_BRANCH?.replaceAll('origin/', '') ?: env.BRANCH_NAME ?: 'dev'}"

        // Variables de entorno según la rama
        ENV = "${env.BRANCH_NAME == 'main' ? 'prod' : env.BRANCH_NAME}"

        // Puerto para Eureka según entorno
        EUREKA_PORT = "${env.BRANCH_NAME == 'main' ? '8761' : env.BRANCH_NAME == 'qa' ? '8762' : '8763'}"

        // Configuración de EC2 según el entorno
        EC2_USER = 'ubuntu'
        EC2_IP_DEV = '35.168.222.61'
        EC2_IP_QA = '54.161.193.236'
        EC2_IP_PROD = '34.227.172.83'


        // Rutas de despliegue en EC2
        REMOTE_PATH = '/home/ubuntu/eureka-server'

        // Credenciales
        SSH_KEY = credentials('ssh-key-ec2')

        // Variables para Java 21
        JDK_DIR = "${WORKSPACE}/jdk21"
        JAVA_HOME = "${JDK_DIR}"
        PATH = "${JDK_DIR}/bin:${PATH}"
    }

    stages {
        stage('🎯 Determine Strategy') {
            steps {
                script {
                    echo "🔍 [EUREKA] Rama detectada: ${env.BRANCH_NAME}"
                    echo "🌍 [EUREKA] Entorno: ${env.ENV}"

                    // Lógica de despliegue automático por rama
                    if (env.BRANCH_NAME == 'dev') {
                        echo "🚀 [EUREKA] ESTRATEGIA: Deploy automático a DEV"
                        env.DEPLOY_STRATEGY = 'auto'
                        env.TARGET_ENV = 'dev'
                    } else if (env.BRANCH_NAME == 'qa') {
                        echo "🔄 [EUREKA] ESTRATEGIA: Deploy automático a QA"
                        env.DEPLOY_STRATEGY = 'auto'
                        env.TARGET_ENV = 'qa'
                    } else if (env.BRANCH_NAME == 'main') {
                        echo "⚠️ [EUREKA] ESTRATEGIA: Aprobación manual + Deploy a PROD"
                        env.DEPLOY_STRATEGY = 'manual-approval'
                        env.TARGET_ENV = 'prod'
                    } else {
                        echo "✏️ [EUREKA] ESTRATEGIA: Solo compilación"
                        env.DEPLOY_STRATEGY = 'compile-only'
                        env.TARGET_ENV = 'none'
                    }

                    echo "🎯 [EUREKA] Estrategia: ${env.DEPLOY_STRATEGY}"
                    echo "🎯 [EUREKA] Entorno: ${env.TARGET_ENV}"
                }
            }
        }

        stage('🔧 Setup JDK 21') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                echo "🔧 [EUREKA] Configurando JDK 21..."
                sh '''
                    mkdir -p ${JDK_DIR}

                    if [ ! -f ${JDK_DIR}/bin/java ]; then
                        echo "📥 [EUREKA] Descargando JDK 21..."
                        wget -q https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz -O jdk21.tar.gz
                        tar -xzf jdk21.tar.gz -C ${JDK_DIR} --strip-components=1
                        rm jdk21.tar.gz
                        echo "✅ [EUREKA] JDK 21 instalado"
                    else
                        echo "✅ [EUREKA] JDK 21 ya existe"
                    fi

                    echo "☕ [EUREKA] Java version:"
                    ${JDK_DIR}/bin/java -version
                '''
            }
        }

        stage('🔨 Build Eureka Server') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                sh '''
                    export JAVA_HOME=${JDK_DIR}
                    export PATH=${JAVA_HOME}/bin:$PATH

                    echo "🔨 [EUREKA] Compilando Eureka Server..."
                    ./mvnw clean package -DskipTests -q

                    if [ -f target/discoveryService-0.0.1-SNAPSHOT.jar ]; then
                        echo "✅ [EUREKA] JAR creado exitosamente"
                        ls -lh target/discoveryService-0.0.1-SNAPSHOT.jar
                    else
                        echo "❌ [EUREKA] Error: JAR no fue creado"
                        exit 1
                    fi
                '''
            }
        }

        stage('🧪 Tests') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                sh '''
                    export JAVA_HOME=${JDK_DIR}
                    export PATH=${JAVA_HOME}/bin:$PATH

                    echo "🧪 [EUREKA] Ejecutando tests..."
                    ./mvnw test -q || echo "⚠️ [EUREKA] Tests fallaron, continuando..."
                '''
            }
        }

        stage('⚠️ Production Approval') {
            when {
                environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
            }
            steps {
                script {
                    echo "🚨 [EUREKA] APROBACIÓN REQUERIDA PARA PRODUCCIÓN"
                    echo "Servicio: EUREKA SERVER"
                    echo "Entorno: PRODUCCIÓN"
                    echo "Rama: ${env.BRANCH_NAME}"
                    echo "Build: ${env.BUILD_NUMBER}"

                    timeout(time: 10, unit: 'MINUTES') {
                        def approved = input(
                            message: '🚨 ¿Aprobar deploy de EUREKA SERVER a PRODUCCIÓN?',
                            ok: '✅ Aprobar',
                            parameters: [
                                choice(
                                    name: 'ACTION',
                                    choices: ['Aprobar', 'Rechazar'],
                                    description: 'Selecciona la acción'
                                )
                            ]
                        )

                        if (approved != 'Aprobar') {
                            error("❌ [EUREKA] Deploy a producción rechazado")
                        }

                        echo "✅ [EUREKA] Deploy a producción APROBADO"
                    }
                }
            }
        }

        stage('🚀 Deploy Eureka Server') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''

                    // Determinar IP según entorno
                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "🚀 [EUREKA] Desplegando en ${env.TARGET_ENV.toUpperCase()} (${EC2_IP})"

                    // Preparar servidor
                    sh """
                    echo "🔧 [EUREKA] Preparando servidor..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${EC2_USER}@${EC2_IP} '
                        mkdir -p ${REMOTE_PATH}

                        # Instalar herramientas básicas
                        which curl > /dev/null || sudo apt-get update -qq && sudo apt-get install -y curl
                        which netstat > /dev/null || sudo apt-get install -y net-tools

                        # Instalar Java si no existe
                        if ! which java > /dev/null; then
                            echo "☕ [EUREKA] Instalando Java..."
                            sudo apt-get update -qq && sudo apt-get install -y openjdk-21-jre-headless
                        fi

                        echo "✅ [EUREKA] Servidor preparado"
                    '
                    """

                    // Copiar JAR
                    sh """
                    echo "📦 [EUREKA] Copiando JAR..."
                    scp -i \$SSH_KEY -o StrictHostKeyChecking=no target/discoveryService-0.0.1-SNAPSHOT.jar ${EC2_USER}@${EC2_IP}:${REMOTE_PATH}/
                    echo "✅ [EUREKA] JAR copiado"
                    """

                    // Script de inicio para Eureka
                    def startScript = """#!/bin/bash
JAR_FILE="${REMOTE_PATH}/discoveryService-0.0.1-SNAPSHOT.jar"
PID_FILE="${REMOTE_PATH}/eureka.pid"
LOG_FILE="${REMOTE_PATH}/eureka.log"

echo "🚀 [EUREKA] Iniciando Eureka Server..."

# Detener proceso existente
if [ -f \$PID_FILE ]; then
    PID=\$(cat \$PID_FILE)
    if ps -p \$PID > /dev/null; then
        echo "🛑 [EUREKA] Deteniendo proceso existente (PID: \$PID)"
        kill \$PID
        sleep 10

        # Force kill si sigue corriendo
        if ps -p \$PID > /dev/null; then
            echo "🔨 [EUREKA] Force killing process"
            kill -9 \$PID
            sleep 5
        fi
    fi
    rm -f \$PID_FILE
fi

# Verificar puerto libre
if netstat -tuln | grep :${EUREKA_PORT} > /dev/null; then
    echo "⚠️ [EUREKA] Puerto ${EUREKA_PORT} en uso, intentando liberar..."
    sudo fuser -k ${EUREKA_PORT}/tcp || true
    sleep 5
fi

# Iniciar Eureka
echo "🎬 [EUREKA] Iniciando en puerto ${EUREKA_PORT}..."
nohup java -jar \$JAR_FILE \\
    --spring.profiles.active=${ENV} \\
    --server.port=${EUREKA_PORT} \\
    --logging.level.root=INFO \\
    --logging.level.com.netflix.eureka=DEBUG \\
    > \$LOG_FILE 2>&1 &

echo \$! > \$PID_FILE
echo "✅ [EUREKA] Iniciado - PID: \$(cat \$PID_FILE), Puerto: ${EUREKA_PORT}"

# Mostrar estado inicial
sleep 10
if ps -p \$(cat \$PID_FILE) > /dev/null; then
    echo "✅ [EUREKA] Proceso corriendo correctamente"
else
    echo "❌ [EUREKA] Error al iniciar - Ver logs:"
    tail -20 \$LOG_FILE
    exit 1
fi
"""

                    // Script de control
                    def controlScript = """#!/bin/bash
PID_FILE="${REMOTE_PATH}/eureka.pid"
LOG_FILE="${REMOTE_PATH}/eureka.log"

case \$1 in
    start)
        ${REMOTE_PATH}/start-eureka.sh
        ;;
    stop)
        echo "🛑 [EUREKA] Deteniendo servicio..."
        if [ -f \$PID_FILE ]; then
            PID=\$(cat \$PID_FILE)
            if ps -p \$PID > /dev/null; then
                kill \$PID
                echo "✅ [EUREKA] Proceso detenido"
            fi
            rm -f \$PID_FILE
        else
            echo "⚠️ [EUREKA] No hay proceso corriendo"
        fi
        ;;
    status)
        echo "📊 [EUREKA] Estado del servicio:"
        if [ -f \$PID_FILE ]; then
            PID=\$(cat \$PID_FILE)
            if ps -p \$PID > /dev/null; then
                echo "✅ [EUREKA] Proceso corriendo (PID: \$PID)"
                curl -f http://localhost:${EUREKA_PORT}/actuator/health 2>/dev/null && echo "✅ [EUREKA] Health: OK" || echo "❌ [EUREKA] Health: FAIL"
            else
                echo "❌ [EUREKA] Proceso no encontrado"
            fi
        else
            echo "❌ [EUREKA] PID file no existe"
        fi
        ;;
    logs)
        echo "📄 [EUREKA] Últimos logs:"
        tail -50 \$LOG_FILE
        ;;
    restart)
        \$0 stop
        sleep 5
        \$0 start
        ;;
    *)
        echo "Uso: \$0 {start|stop|status|logs|restart}"
        ;;
esac
"""

                    // Crear scripts
                    sh """
                    echo "📝 [EUREKA] Creando scripts de control..."
                    echo '${startScript}' | ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'cat > ${REMOTE_PATH}/start-eureka.sh'
                    echo '${controlScript}' | ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'cat > ${REMOTE_PATH}/eureka-control.sh'

                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        chmod +x ${REMOTE_PATH}/start-eureka.sh
                        chmod +x ${REMOTE_PATH}/eureka-control.sh
                    '
                    """

                    // Ejecutar deploy
                    sh """
                    echo "🚀 [EUREKA] Ejecutando deploy..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '${REMOTE_PATH}/eureka-control.sh start'
                    """

                    echo "✅ [EUREKA] Deploy completado en ${env.TARGET_ENV.toUpperCase()}!"
                }
            }
        }

        stage('🔍 Verification') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''

                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "🔍 [EUREKA] Verificando deploy en ${env.TARGET_ENV.toUpperCase()}..."

                    // Esperar que el servicio esté listo
                    sh "sleep 60"

                    // Verificar health
                    sh """
                    echo "🏥 [EUREKA] Verificando health endpoint..."

                    # Verificar proceso
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '${REMOTE_PATH}/eureka-control.sh status'

                    # Verificar health endpoint
                    for i in {1..15}; do
                        if ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'curl -f http://localhost:${EUREKA_PORT}/actuator/health' 2>/dev/null; then
                            echo "✅ [EUREKA] Health Check: PASSED"
                            break
                        fi
                        echo "⏳ [EUREKA] Esperando health endpoint... (\$i/15)"
                        sleep 10
                    done

                    # Verificar Eureka Dashboard
                    if ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'curl -f http://localhost:${EUREKA_PORT}/' 2>/dev/null; then
                        echo "✅ [EUREKA] Dashboard: ACCESSIBLE"
                    else
                        echo "⚠️ [EUREKA] Dashboard: NOT_ACCESSIBLE"
                    fi

                    echo "✅ [EUREKA] Verificación completada"
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.DEPLOY_STRATEGY && env.DEPLOY_STRATEGY != 'compile-only') {
                    def EC2_IP = ''
                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo """
🎉 [EUREKA] ¡DEPLOY EXITOSO EN ${env.TARGET_ENV.toUpperCase()}!

📋 Servicio desplegado:
   • Eureka Server: Puerto ${EUREKA_PORT}
   • Servidor: ${EC2_IP}

🌐 URLs de verificación:
   • Health: http://${EC2_IP}:${EUREKA_PORT}/actuator/health
   • Dashboard: http://${EC2_IP}:${EUREKA_PORT}/

🛠️ Comandos útiles:
   • Estado: ${REMOTE_PATH}/eureka-control.sh status
   • Logs: ${REMOTE_PATH}/eureka-control.sh logs
   • Reiniciar: ${REMOTE_PATH}/eureka-control.sh restart
"""
                } else {
                    echo "✅ [EUREKA] Compilación exitosa - Rama: ${env.BRANCH_NAME}"
                }
            }
        }

        failure {
            echo """
❌ [EUREKA] PIPELINE FALLIDO

🔍 Información:
   • Servicio: EUREKA SERVER
   • Rama: ${env.BRANCH_NAME}
   • Estrategia: ${env.DEPLOY_STRATEGY ?: 'N/A'}
   • Build: ${env.BUILD_NUMBER}
   • URL: ${env.BUILD_URL}

🛠️ Revisar logs para más detalles
"""
        }

        cleanup {
            sh '''
                # Limpiar archivos temporales
                rm -rf jdk21.tar.gz || true
                echo "✅ [EUREKA] Limpieza completada"
            '''
        }
    }
}